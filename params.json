{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Polyglot.js\r\n===========\r\n\r\nPolyglot.js is a tiny I18n helper library written in JavaScript, made to\r\nwork both in the browser and in Node. It provides a simple solution for\r\ninterpolation and pluralization, based off of Airbnb's\r\nexperience adding I18n functionality to its Backbone.js and Node apps.\r\n\r\nI18n is incredibly important for us at [Airbnb](https://www.airbnb.com/),\r\nas we have listings in 192 countries, and we translate our site into 30-odd different languages.\r\nWe're also [hiring talented engineers](https://www.airbnb.com/jobs/departments/engineering)\r\nto help us scale up to meet the challenges of buliding a global marketplace.\r\n\r\nView the [documentation on Github](http://airbnb.github.com/polyglot.js).\r\n\r\nView the [annotated source](http://airbnb.github.com/polyglot.js/polyglot.html).\r\n\r\nDownload the [development version](https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.js): 2.6kb, unminified with comments.\r\n\r\nDownload the [production version](https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.min.js): 665b, minified and gzipped.\r\n\r\nPolylglot is agnostic to your translation backend. It doesn't perform any\r\ntranslation; it simply gives you a way to manage translated phrases from\r\nyour client- or server-side JavaScript application.\r\n\r\n## Usage\r\n\r\n### Translation\r\n\r\nTell Polyglot what to say by simply giving it a phrases object,\r\nwhere the key is the canonical name of the phrase and the value is\r\nthe already-translated string.\r\n\r\n    Polyglot.extend({\r\n      \"hello\": \"Hello\"\r\n    });\r\n\r\n    Polyglot.t(\"hello\");\r\n    => \"Hello\"\r\n\r\nPolyglot doesn't do the translation for you. It's up to you to give it\r\nthe proper phrases for the user's locale.\r\n\r\nA common pattern is to gather a hash of phrases in your backend, and output\r\nthem in a `<script>` tag at the bottom of the document.  For example, in Rails:\r\n\r\n`app/controllers/home_controller.rb`\r\n\r\n    def index\r\n      @phrases = {\r\n        \"home.login\" => I18n.t(\"home.login\"),\r\n        \"home.signup\" => I18n.t(\"home.signup\"),\r\n        ...\r\n      }\r\n    end\r\n\r\n`app/views/home/index.html.erb`\r\n\r\n    <script>\r\n      Polyglot.extend(<%= raw @phrases.to_json %>);\r\n    </script>\r\n\r\nAnd now you can utilize i.e. `Polyglot.t(\"home.login\")` in your JavaScript application\r\nor Handlebars templates.\r\n\r\n### Interpolation\r\n\r\n`Polyglot.t()` also provides interpolation. Pass an object with key-value pairs of\r\ninterpolation arguments as the second parameter.\r\n\r\n    Polyglot.extend({\r\n      \"hello_name\": \"Hola, %{name}.\"\r\n    });\r\n\r\n    Polyglot.t(\"hello_name\", {name: \"DeNiro\"});\r\n    => \"Hola, DeNiro.\"\r\n\r\n### Pluralization\r\n\r\nPolyglot provides a very basic pattern for providing\r\npluralization based on a singular noun. Because various languages\r\nhave different nominal forms for zero, one, and multiple, and because\r\nthe noun can be before or after the count, we have to be overly explicit\r\nabout the possible phrases.\r\n\r\nFor pluralizing \"car\", it assumes you have phrase keys of the form:\r\n\r\n    Polyglot.extend({\r\n      \"pluralize.car.zero\": \"%{count} cars\",\r\n      \"pluralize.car.one\":  \"%{count} car\",\r\n      \"pluralize.car.many\": \"%{count} cars\"\r\n    });\r\n\r\n`Polyglot.pluralize()` will choose the appropriate phrase based\r\non the provided count.\r\n\r\n    Polyglot.pluralize(\"car\", 0);\r\n    => \"0 cars\"\r\n\r\n    Polyglot.pluralize(\"car\", 1);\r\n    => \"1 car\"\r\n\r\n    Polyglot.pluralize(\"car\", 2);\r\n    => \"2 cars\"\r\n\r\nThe second argument can be a `Number` or anything with a `length` property,\r\nsuch as an `Array` or a `Backbone.Collection`.\r\n\r\n    var Cars = Backbone.Collection.extend({});\r\n    var cars = new Cars;\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"0 cars\"\r\n\r\n    cars.add({make: \"Ford\", model: \"Fiesta\"});\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"1 car\"\r\n\r\n    cars.add({make: \"Subaru\", model: \"Impreza\"});\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"2 cars\"\r\n\r\n### Handlebars Helpers\r\n\r\nPolygot also provides two useful Handlebars helpers: `t` and `pluralize`.\r\n\r\n#### t\r\n\r\nYou can use the `t` helper with or without interpolation arguments.\r\n\r\n    // In a Handlebars template\r\n    <h1>{{t \"welcome_to_my_site\"}}</h1>\r\n    <p>{{t \"signed_in_as_username\" username=username}}</p>\r\n\r\n    // In your JavaScript\r\n    Polyglot.extend({\r\n      \"welcome_to_my_site\": \"Welcome to my site.\",\r\n      \"signed_in_as_username\": \"Signed in as %{username}.\"\r\n    });\r\n\r\n    var template = Handlebars.compile(...);\r\n    var html = template({username: \"Spike\"});\r\n\r\ngives:\r\n\r\n    <h1>Welcome to my site.</h1>\r\n    <p>Signed in as Spike.</p>\r\n\r\nUse as many interpolation arguments as you need.\r\n\r\n    // In a Handlebars template\r\n    <h1>{{t \"hello_first_and_last_name\" firstName=firstName lastName=lastName}}</h1>\r\n\r\n    // In your JavaScript\r\n    Polyglot.extend({\r\n      \"hello_first_and_last_name\": \"Hello, %{firstName} %{lastName}.\"\r\n    });\r\n\r\ngives:\r\n\r\n    <h1>Hello, Robert DeNiro.</h1>\r\n\r\nThe output of `t` is not HTML-escaped by default. To escape it, use Handlebars'\r\ntriple-bracket `{{{t ...}}}` notation:\r\n\r\n    // In a Handlebars template\r\n    <p>{{t \"num_unread_messages\" count=numUnread}}</p>\r\n    <p>{{{t \"num_unread_messages\" count=numUnread}}}</p>\r\n\r\n    // In your JavaScript\r\n    Polyglot.extend({\r\n      \"num_unread_messages\": \"<strong>%{count}</strong> unread messages\"\r\n    });\r\n\r\ngives:\r\n\r\n    <p>&lt;strong&gt;5&lt;/strong&gt; unread messages</p>\r\n    <p><strong>5</strong> unread messages</p>\r\n\r\n#### pluralize\r\n\r\nThe `pluralize` helper is just a wrapper around `Polyglot.pluralize()`, so\r\nyou pass it a singular noun as the main string argument, and `count` as\r\nan argument using Handlebars' block hash syntax.  The `count` argument can\r\nbe a `Number` or anything with a lengh property, such as `Array` or `Backbone.Collection`.\r\n\r\n    <p>{{pluralize \"car\" count=carCollection}}</p>\r\n\r\ngives:\r\n\r\n    <p>3 cars</p>\r\n\r\n## Public Methods\r\n\r\n### Polyglot.extend(phrases)\r\n\r\nUse `extend` to tell Polyglot how to translate a given key.\r\n\r\n    Polyglot.extend({\r\n      \"hello\": \"Hello\",\r\n      \"hello_name\": \"Hello, %{name}\"\r\n    });\r\n\r\nThe key can be any string.  Feel free to call `extend` multiple times;\r\nit will override any phrases with the same key, but leave existing phrases\r\nuntouched.\r\n\r\n### Polyglot.clear()\r\n\r\nClears all phrases. Useful for special cases, such as freeing\r\nup memory if you have lots of phrases but no longer need to\r\nperform any translation. Also used internally by `replace`.\r\n\r\n\r\n### Polyglot.replace(phrases)\r\n\r\nCompletely replace the existing phrases with a new set of phrases.\r\nNormally, just use `extend` to add more phrases, but under certain\r\ncircumstances, you may want to make sure no old phrases are lying around.\r\n\r\n### Polyglot.t(key, interpolationOptions)\r\n\r\nThe most-used method. Provide a key, and `t` will return the\r\nphrase.\r\n\r\n    Polyglot.t(\"hello\");\r\n    => \"Hello\"\r\n\r\nThe phrase value is provided first by a call to `Polyglot.extend()` or\r\n`Polyglot.replace()`.\r\n\r\nPass in an object as the second argument to perform interpolation.\r\n\r\n    Polyglot.t(\"hello_name\", {name: \"Spike\"});\r\n    => \"Hello, Spike\"\r\n\r\nIf you like, you can provide a default value in case the phrase is missing.\r\nUse the special option key \"_\" to specify a default.\r\n\r\n    Polyglot.t(\"i_like_to_write_in_language\", {\r\n      _: \"I like to write in %{language}.\",\r\n      language: \"JavaScript\"\r\n    });\r\n    => \"I like to write in JavaScript.\"\r\n\r\n\r\n### Polyglot.pluralize(noun, count)\r\n\r\nFor pluralizing \"car\", it assumes you have phrase keys of the form:\r\n\r\n    Polyglot.extend({\r\n      \"pluralize.car.zero\": \"%{count} cars\",\r\n      \"pluralize.car.one\":  \"%{count} car\",\r\n      \"pluralize.car.many\": \"%{count} cars\"\r\n    });\r\n\r\n`Polyglot.pluralize()' will choose the appropriate phrase based\r\non the provided count.\r\n\r\n    Polyglot.pluralize(\"car\", 0);\r\n    => \"0 cars\"\r\n\r\n    Polyglot.pluralize(\"car\", 1);\r\n    => \"1 car\"\r\n\r\n    Polyglot.pluralize(\"car\", 2);\r\n    => \"2 cars\"\r\n\r\nThe second argument can be a `Number` or anything with a `length` property,\r\nsuch as an `Array` or a `Backbone.Collection`.\r\n\r\n    var Cars = Backbone.Collection.extend({});\r\n    var cars = new Cars;\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"0 cars\"\r\n\r\n    cars.add({make: \"Ford\", model: \"Fiesta\"});\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"1 car\"\r\n\r\n    cars.add({make: \"Subaru\", model: \"Impreza\"});\r\n\r\n    Polyglot.pluralize(\"car\", cars);\r\n    => \"2 cars\"\r\n\r\n### Polyglot.registerHandlebars(Handlebars)\r\n\r\nRegisters Polyglot's Handlebars helpers on a given\r\nHandlebars context. This is automatically called if we find\r\na global `Handlebars` object, which makes use in the\r\nbrowser a snap if Handlebars is included before Polyglot.\r\nOtherwise, you can manually register the Handlebars helpers\r\nby passing in a Handlebars conext, which is the primary Node\r\nuse case:\r\n\r\n    var Handlebars = require('handlebars');\r\n    var Polyglot = require('polyglot');\r\n\r\n    console.log(Handlebars.helpers.t);\r\n    => undefined\r\n\r\n    Polyglot.registerHandlebars(Handlebars);\r\n\r\n    console.log(Handlebars.helpers.t);\r\n    => function(){...}\r\n\r\n## Handlebars helpers\r\n\r\n### t\r\n\r\n    <h1>{{t \"hello_name\" name=name}}</h1>\r\n\r\ngives:\r\n\r\n    <h1>Hello, DeNiro.</h1>\r\n\r\n### pluralize\r\n\r\n    <p>{{pluralize \"car\" count=carCollection}}</p>\r\n\r\ngives:\r\n\r\n    <p>3 cars</p>\r\n\r\n","tagline":"Give your JavaScript the ability to speak many languages.","name":"Polyglot.js"}