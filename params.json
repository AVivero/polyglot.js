{"name":"Polyglot.js","tagline":"Give your JavaScript the ability to speak many languages.","body":"Polyglot.js\r\n===========\r\n\r\nPolyglot.js is a tiny I18n helper library written in JavaScript, made to\r\nwork both in the browser and in CommonJS environments (Node). It provides a simple solution for interpolation and pluralization, based off of Airbnb's\r\nexperience adding I18n functionality to its Backbone.js and Node apps. Polyglot has zero dependencies.\r\n\r\nI18n is incredibly important for us at [Airbnb](https://www.airbnb.com/),\r\nas we have listings in 192 countries, and we translate our site into 30-odd different languages.\r\nWe're also [hiring talented engineers](https://www.airbnb.com/jobs/departments/engineering)\r\nto help us scale up to meet the challenges of buliding a global marketplace.\r\n\r\nView the [documentation on Github](http://airbnb.github.com/polyglot.js).\r\n\r\nView the [annotated source](http://airbnb.github.com/polyglot.js/polyglot.html).\r\n\r\nDownload the [development version](https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.js): 7.9kb, unminified with comments.\r\n\r\nDownload the [production version](https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.min.js): 2.8kb, minified (1.3kb gzipped).\r\n\r\nPolylglot is agnostic to your translation backend. It doesn't perform any\r\ntranslation; it simply gives you a way to manage translated phrases from\r\nyour client- or server-side JavaScript application.\r\n\r\n## Installation\r\n\r\nFor use with Node, install with [NPM](http://npmjs.org):\r\n\r\n    $ npm install node-polyglot\r\n\r\n### Running the tests\r\n\r\n    $ npm install\r\n\r\n    $ npm test\r\n\r\n      t\r\n        ✓ should translate a simple string\r\n        ✓ should return the key if translation not found\r\n        ✓ should interpolate\r\n        ✓ should interpolate the same placeholder multiple times\r\n        ✓ should allow you to supply default values \r\n        ✓ should return the non-interpolated key if not initialized with allowMissing and translation not found \r\n        ✓ should return an interpolated key if initialized with allowMissing and translation not found \r\n\r\n      pluralize\r\n        ✓ should support pluralization with an integer \r\n        ✓ should accept a number as a shortcut to pluralize a word \r\n\r\n      locale\r\n        ✓ should default to 'en'\r\n        ✓ should get and set locale\r\n\r\n      extend\r\n        ✓ should support multiple extends, overriding old keys\r\n        ✓ shouldn't forget old keys\r\n\r\n      clear\r\n        ✓ should wipe out old phrases\r\n\r\n      replace\r\n        ✓ should wipe out old phrases and replace with new phrases\r\n\r\n\r\n      ✔ 15 tests complete (19ms)\r\n\r\n## Usage\r\n\r\n### Instantiation\r\n\r\nFirst, create an instance of the `Polyglot` class, which you will use for translation.\r\n\r\n```js\r\nvar polyglot = new Polyglot();\r\n```\r\n\r\nPolyglot is class-based so you can maintain different sets of phrases at the same time, possibly in different locales. This is very useful for example when serving requests with [Express](http://expressjs.com), because each request may have a different locale, and you don't want concurrent requests to clobber each other's phrases.\r\n\r\n### Translation\r\n\r\nTell Polyglot what to say by simply giving it a phrases object,\r\nwhere the key is the canonical name of the phrase and the value is\r\nthe already-translated string.\r\n\r\n```js\r\npolyglot.extend({\r\n  \"hello\": \"Hello\"\r\n});\r\n\r\npolyglot.t(\"hello\");\r\n=> \"Hello\"\r\n```\r\n\r\nYou can also pass a mapping at instantiation, using the key `phrases`:\r\n\r\n```js\r\nvar polyglot = new Polyglot({phrases: {\"hello\": \"Hello\"}});\r\n```\r\n\r\nPolyglot doesn't do the translation for you. It's up to you to give it\r\nthe proper phrases for the user's locale.\r\n\r\nA common pattern is to gather a hash of phrases in your backend, and output\r\nthem in a `<script>` tag at the bottom of the document.  For example, in Rails:\r\n\r\n`app/controllers/home_controller.rb`\r\n\r\n```ruby\r\ndef index\r\n  @phrases = {\r\n    \"home.login\" => I18n.t(\"home.login\"),\r\n    \"home.signup\" => I18n.t(\"home.signup\"),\r\n    ...\r\n  }\r\nend\r\n```\r\n\r\n`app/views/home/index.html.erb`\r\n\r\n```html\r\n<script>\r\n  var polyglot = new Polyglot({phrases: <%= raw @phrases.to_json %>});\r\n</script>\r\n```\r\n\r\nAnd now you can utilize i.e. `polyglot.t(\"home.login\")` in your JavaScript application\r\nor Handlebars templates.\r\n\r\n### Interpolation\r\n\r\n`Polyglot.t()` also provides interpolation. Pass an object with key-value pairs of\r\ninterpolation arguments as the second parameter.\r\n\r\n```js\r\npolyglot.extend({\r\n  \"hello_name\": \"Hola, %{name}.\"\r\n});\r\n\r\npolyglot.t(\"hello_name\", {name: \"DeNiro\"});\r\n=> \"Hola, DeNiro.\"\r\n```\r\n\r\n### Pluralization\r\n\r\nFor pluralization to work properly, you need to tell Polyglot what the current locale is.  You can use `polyglot.locale(\"fr\")` to set the locale to, for example, French. This method is also a getter:\r\n\r\n```js\r\npolyglot.locale()\r\n=> \"fr\"\r\n```\r\n\r\nYou can also pass this in during instantiation.\r\n\r\n```js\r\nvar polyglot = new Polyglot({locale: \"fr\"});\r\n```\r\n\r\nCurrently, the _only_ thing that Polyglot uses this locale setting for is pluralization.\r\n\r\nPolyglot provides a very basic pattern for providing\r\npluralization based on a single string that contains all plural forms for a given phrase. Because various languages have different nominal forms for zero, one, and multiple, and because the noun can be before or after the count, we have to be overly explicit\r\nabout the possible phrases.\r\n\r\nTo get a pluralized phrase, still use `polyglot.t()` but use a specially-formatted phrase string that separates the plural forms by the delimeter `||||`, or four vertical pipe characters.\r\n\r\nFor pluralizing \"car\" in English, Polyglot assumes you have a phrase of the form:\r\n\r\n```js\r\npolyglot.extend({\r\n  \"num_cars\": \"%{smart_count} car |||| %{smart_count} cars\",\r\n});\r\n```\r\n\r\nEnglish (and German, Spanish, Italian, and a few others) there are only two plural forms: singular and not-singular.\r\n\r\nSome languages get a bit more complicated. In Czech, there are three separate forms: 1, 2 through 4, and 5 and up. Russian is even crazier.\r\n\r\n`polyglot.t()` will choose the appropriate phrase based\r\non the provided `smart_count` option, whose value is a number.\r\n\r\n```js\r\npolyglot.t(\"num_cars\", {smart_count: 0});\r\n=> \"0 cars\"\r\n\r\npolyglot.t(\"num_cars\", {smart_count: 1});\r\n=> \"1 car\"\r\n\r\npolyglot.t(\"num_cars\", {smart_count: 2});\r\n=> \"2 cars\"\r\n```\r\n\r\nAs a shortcut, you can also pass a number to the second parameter:\r\n\r\n```js\r\npolyglot.t(\"num_cars\", 2);\r\n=> \"2 cars\"\r\n```\r\n\r\n## Public Methods\r\n\r\n### Polyglot.prototype.extend(phrases)\r\n\r\nUse `extend` to tell Polyglot how to translate a given key.\r\n\r\n```js\r\npolyglot.extend({\r\n  \"hello\": \"Hello\",\r\n  \"hello_name\": \"Hello, %{name}\"\r\n});\r\n```\r\n\r\nThe key can be any string.  Feel free to call `extend` multiple times;\r\nit will override any phrases with the same key, but leave existing phrases\r\nuntouched.\r\n\r\n### Polyglot.prototype.clear()\r\n\r\nClears all phrases. Useful for special cases, such as freeing\r\nup memory if you have lots of phrases but no longer need to\r\nperform any translation. Also used internally by `replace`.\r\n\r\n\r\n### Polyglot.prototype.replace(phrases)\r\n\r\nCompletely replace the existing phrases with a new set of phrases.\r\nNormally, just use `extend` to add more phrases, but under certain\r\ncircumstances, you may want to make sure no old phrases are lying around.\r\n\r\n### Polyglot.prototype.t(key, interpolationOptions)\r\n\r\nThe most-used method. Provide a key, and `t()` will return the\r\nphrase.\r\n\r\n```\r\npolyglot.t(\"hello\");\r\n=> \"Hello\"\r\n```\r\n\r\nThe phrase value is provided first by a call to `polyglot.extend()` or\r\n`polyglot.replace()`.\r\n\r\nPass in an object as the second argument to perform interpolation.\r\n\r\n```\r\npolyglot.t(\"hello_name\", {name: \"Spike\"});\r\n=> \"Hello, Spike\"\r\n```\r\n\r\nPass a number as the second argument as a shortcut to `smart_count`:\r\n\r\n```js\r\n// same as: polyglot.t(\"car\", {smart_count: 2});\r\npolyglot.t(\"car\", 2);\r\n=> \"2 cars\"\r\n```\r\n\r\nIf you like, you can provide a default value in case the phrase is missing.\r\nUse the special option key \"_\" to specify a default.\r\n\r\n```js\r\npolyglot.t(\"i_like_to_write_in_language\", {\r\n  _: \"I like to write in %{language}.\",\r\n  language: \"JavaScript\"\r\n});\r\n=> \"I like to write in JavaScript.\"\r\n```\r\n\r\n## History\r\n\r\n### v0.3.0: August 6, 2013\r\n* _Breaking change_: Removed `pluralize()` method; instead, just use the `t()` method, passing in a `smart_count` option.\r\n* _Breaking change_: Removed the ability to use `Array`, `Backbone.Collection`, etc. instances for the `smart_count` option; instead, must pass a `Number`.\r\n* Allow passing `Number` as second argument to `t()`, which gets converted to the options object `{smart_count: <my number>}`.\r\n\r\n### v0.2.1: May 2, 2013\r\n* Added `allowMissing` option to let the phrase key be the default translation (thanks @ziad-saab).\r\n\r\n### v0.2.0: Dec 20, 2012\r\n* _Breaking change_: Moved from Singleton pattern to class-based. Now you create an instance of the `Polyglot` class rather than using class methods directly on it. The reason is to allow maintaining multiple sets of phrases, which is something we ran into at Airbnb with a highly-concurrent Express app.\r\n* _Breaking change_: Removed the built-in Handlebars helpers, because Handlebars is a singleton, and it's messy to create a single helper function that can be bound to different Polyglot instances.  Instead, it's super easy to create your own, based on your requirements.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}